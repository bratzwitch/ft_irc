#include "Server.hpp"
#include "CommandHandler.hpp"
#include <iostream>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <cstring>
#include <fcntl.h>
#include <poll.h>
#include <cerrno>
#include <utility>
#include <signal.h>
#include <stdexcept>

bool Server::shouldStop = false;

Server::Server(const Config& cfg)
    : m_serverSocket(-1), config(cfg), cmdHandler(new CommandHandler(*this)) {}

Server::~Server() {
    delete cmdHandler;
    if (m_serverSocket != -1) {
        close(m_serverSocket);
    }
}

bool Server::initialize() {
    std::cout << "Initializing server on port " << config.getPort() << " with password " << config.getPassword() << "\n";
    signal(SIGHUP, Server::signalHandler);  /* terminal closing */
    signal(SIGINT, Server::signalHandler);  /* Ctrl+C */
    signal(SIGTERM, Server::signalHandler); /* ps -aux | grep ircserv, kill <PID>/kill -TERM <PID> */
    return setupSocket();
}

void Server::signalHandler(int sig) {
    if (sig == SIGINT || sig == SIGHUP || sig == SIGTERM) {
        shouldStop = true;
    }
}

/* –§—É–Ω–∫—Ü–∏—è `run()` –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. */
void Server::run() {
    std::cout << "üß† \033[38;5;219mServer is running...\033[0m\n";

    std::vector<pollfd> fds;
    pollfd serverFd;
    serverFd.fd = m_serverSocket; /* —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å */
    serverFd.events = POLLIN; /* –∫–ª—é—á–µ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ */
    serverFd.revents = 0; /* —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π) */
    fds.push_back(serverFd); /* –ø–µ—Ä–≤—ã–π —Å–æ–∫–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω. —ç—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ —Å–∞–º —Å–µ—Ä–≤–µ—Ä */

    while (!shouldStop) {
        int ret = poll(fds.data(), fds.size(), 50);
        if (ret < 0) {
            if (errno == EINTR) continue;
            std::cerr << "Error: poll failed with errno " << errno << "\n";
            shutdown();
            return;
        } else if (ret == 0) {
            continue;
        }

        for (size_t i = 0; i < fds.size(); ++i) {
            if (fds[i].revents & POLLIN) {
                if (fds[i].fd == m_serverSocket) {
                    handleNewConnection(fds);
                } else {
                    handleClientData(fds[i].fd, fds); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –≤–∫–ª—é—á–∞—è QUIT
                }
            }
            if (fds[i].revents & POLLOUT && fds[i].fd != m_serverSocket) {
                if (m_clients.find(fds[i].fd) == m_clients.end()) { // –ö–ª–∏–µ–Ω—Ç —É–∂–µ —É–¥–∞–ª—ë–Ω
                    close(fds[i].fd);
                    fds.erase(fds.begin() + i);
                    --i;
                    continue;
                }
                Client& client = m_clients[fds[i].fd];
                std::string buffer = client.getOutputBuffer();
                if (!buffer.empty()) {
                    ssize_t bytesWritten = send(fds[i].fd, buffer.c_str(), buffer.size(), 0);
                    if (bytesWritten > 0) {
                        client.eraseOutputBuffer(bytesWritten);
                        std::cout << "Bytes sent: " << bytesWritten << "\n";
                    } else if (bytesWritten <= 0) {
                        std::cout << "Client " << fds[i].fd << " disconnected during send.\n";
                        removeClient(fds[i].fd, fds); // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–µ
                        --i; // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω–¥–µ–∫—Å, —Ç–∞–∫ –∫–∞–∫ —É–¥–∞–ª–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç
                        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                    }
                }
                // –°–Ω–∏–º–∞–µ–º POLLOUT —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç
                if (client.getOutputBuffer().empty()) {
                    fds[i].events = POLLIN;
                }
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º events –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        for (size_t i = 1; i < fds.size(); ++i) {
            if (m_clients.find(fds[i].fd) != m_clients.end()) {
                Client& client = m_clients[fds[i].fd];
                if (!client.getOutputBuffer().empty()) {
                    fds[i].events = POLLIN | POLLOUT;
                } else {
                    fds[i].events = POLLIN;
                }
            }
        }
    }

    std::cout << "\n‚ú® \033[38;5;227mShutting down server...\033[0m\n ‚ú®";
    shutdown();
    return;
}

/* –§—É–Ω–∫—Ü–∏—è `setupSocket()` –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–æ–∫–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã. */

bool Server::setupSocket() {
    m_serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    /* AF_INET (IPv4) –µ—Å–ª–∏ –µ—Å—Ç—å Wi-Fi (192.168.1.1) –∏ localhost (127.0.0.1) [–∏–ª–∏ AF_INET6 (IPv6)], —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å –æ–±–∞, SOCK_STREAM Transmission Control Protocol ‚Äî –ø—Ä–æ—Ç–æ–∫–æ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–µ–π) */
    if (m_serverSocket < 0) {
        std::cerr << "Error: Unable to create socket\n";
        return false;
    }

    if (fcntl(m_serverSocket, F_SETFL, O_NONBLOCK) < 0) /* –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º: F_SETFL –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, O_NONBLOCK —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ -1/0 */
    {
        std::cerr << "Error: fcntl failed to set non-blocking mode for server socket\n";
        return false;
    }

    int opt = 1; /* –≤–∫–ª—é—á–∏—Ç—å SO_REUSEADDR –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ä—Ç, —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–æ —É —á—É–≤–∞–∫–æ–≤ –Ω–∞ –≤–∏–¥–µ–æ */
    if (setsockopt(m_serverSocket, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) /* Socket Option Level */
    {
        std::cerr << "Error: setsockopt failed\n";
        return false;
    }

    struct sockaddr_in serverAddr;
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET; /* AF_INET –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞–¥—Ä–µ—Å–∞ IPv4 */
    serverAddr.sin_addr.s_addr = INADDR_ANY; /* –ª—é–±–æ–π IP-–∞–¥—Ä–µ—Å —Å –∫–æ–º–ø–∞ */
    serverAddr.sin_port = htons(config.getPort()); /* host to network short –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–ø–µ—Ü –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ñ–æ—Ä–º–∞—Ç */

    if (bind(m_serverSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) /* –ø—Ä–∏–≤—è–∑–∫–∞ —Å–æ–∫–µ—Ç–∞ –∫ –ø–æ—Ä—Ç—É –∏ –∞–¥—Ä–µ—Å—É */
    {
        std::cerr << "Error: bind failed, reason: " << strerror(errno) << "\n";
        return false;
    }

    if (listen(m_serverSocket, 10) < 0) {
        std::cerr << "Error: listen failed, reason: " << strerror(errno) << "\n";
        return false;
    }

    std::cout << "Server is listening on port " << config.getPort() << "\n";
    return true;
}

/* –§—É–Ω–∫—Ü–∏—è `handleNewConnection()` –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.  
1. **–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ** –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (`accept()`).  
2. **–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º** –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–∫–µ—Ç–∞.  
3. **–°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞** –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (`m_clients`).  
4. **–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å**.  
5. **–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞** –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ (`pollfd`) –¥–ª—è —á—Ç–µ–Ω–∏—è (`POLLIN`) –∏ –∑–∞–ø–∏—Å–∏ (`POLLOUT`).  
6. –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.  
7. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–∫–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. */

void Server::handleNewConnection(std::vector<pollfd>& fds) {
    struct sockaddr_in clientAddr;
    socklen_t clientLen = sizeof(clientAddr);

    int clientSocket = accept(m_serverSocket, (struct sockaddr *)&clientAddr, &clientLen);
    if (clientSocket < 0) {
        std::cerr << "Error: Failed to accept client connection\n";
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
    long maxFds = sysconf(_SC_OPEN_MAX);
    if (maxFds < 0) {
        std::cerr << "Error: Failed to get max file descriptors limit\n";
        close(clientSocket);
        return;
    }
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–æ–∫–µ—Ç –∏ –º–∏–Ω–∏–º—É–º 3 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ (stdin, stdout, stderr)
    if (fds.size() >= static_cast<size_t>(maxFds) - 4) {
        std::cerr << "Error: Maximum number of file descriptors reached (" << maxFds << ")\n";
        std::cerr << "Rejecting new connection from " << inet_ntoa(clientAddr.sin_addr)
                  << ":" << ntohs(clientAddr.sin_port) << "\n";
        close(clientSocket);
        return;
    }

    if (fcntl(clientSocket, F_SETFL, O_NONBLOCK) < 0) {
        std::cerr << "Error: fcntl failed to set non-blocking mode for client\n";
        close(clientSocket);
        return;
    }

    m_clients.insert(std::make_pair(clientSocket, Client(clientSocket)));
    // Client newClient(clientSocket);
    // newClient.appendOutputBuffer("Enter password: ");
    // m_clients.insert(std::pair<int, Client>(clientSocket, newClient));

    pollfd clientFd;
    clientFd.fd = clientSocket;
    clientFd.events = POLLIN | POLLOUT;
    clientFd.revents = 0; // –Ø–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    fds.push_back(clientFd);

    std::cout << "New client connected: " << inet_ntoa(clientAddr.sin_addr)
              << ":" << ntohs(clientAddr.sin_port) << "\n";
}

/* –§—É–Ω–∫—Ü–∏—è `handleClientData()` –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã.  
1. **–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö**  
   - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á—Ç–µ–Ω–∏—è (`POLLIN`).  
   - –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä (`read()`).  
   - –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ (`removeClient()`).  
   - –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞.  

2. **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥**  
   - –ò—â–µ—Ç –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ (`\r\n` –∏–ª–∏ `\n`).  
   - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É (`cmdHandler->processCommand()`).  
   - –û—á–∏—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞.  

3. **–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É**  
   - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (`POLLOUT`).  
   - –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –Ω–µ –ø—É—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ (`send()`).  
   - –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —É–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞.  
   - –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç, —É–±–∏—Ä–∞–µ—Ç —Ñ–ª–∞–≥ `POLLOUT`. */

   void Server::handleClientData(int clientSocket, std::vector<pollfd>& fds) {
    char buffer[1024];

    for (size_t i = 0; i < fds.size(); ++i) {
        if (fds[i].fd == clientSocket) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (POLLIN)
            if (fds[i].revents & POLLIN) {
                ssize_t bytesRead = read(clientSocket, buffer, sizeof(buffer) - 1);
                if (bytesRead <= 0) {
                    // –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                    std::cout << "Client disconnected or error occurred.\n";
                    removeClient(clientSocket, fds);
                    return;
                }

                buffer[bytesRead] = '\0';
                std::cout << "Raw data received: " << buffer << " (bytesRead: " << bytesRead << ")" << std::endl;
                m_clients[clientSocket].appendInputBuffer(buffer);

                std::string inputBuffer = m_clients[clientSocket].getInputBuffer();
                std::cout << "Current buffer: " << inputBuffer << std::endl;

                size_t pos;
                while ((pos = inputBuffer.find("\r\n")) != std::string::npos || 
                       (pos = inputBuffer.find("\n")) != std::string::npos) {
                    std::string command = inputBuffer.substr(0, pos);
                    size_t len_to_erase = (inputBuffer[pos] == '\r') ? pos + 2 : pos + 1;
                    inputBuffer.erase(0, len_to_erase);

                    if (!command.empty()) {
                        std::cout << "Processed input: " << command << std::endl;
                        cmdHandler->processCommand(clientSocket, command, fds, i);
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–º
                m_clients[clientSocket].clearInputBuffer();
                if (!inputBuffer.empty()) {
                    m_clients[clientSocket].appendInputBuffer(inputBuffer);
                    std::cout << "Partial data remains in buffer: " << inputBuffer << std::endl;
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (POLLOUT)
            if (fds[i].revents & POLLOUT) {
                std::cout << "POLLOUT triggered for client " << clientSocket 
                          << ", buffer size: " << m_clients[clientSocket].getOutputBuffer().length() << std::endl;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –∏ –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                std::map<int, Client>::iterator clientIt = m_clients.find(clientSocket);
                if (clientIt == m_clients.end()) {
                    std::cout << "Client " << clientSocket << " not found in m_clients.\n";
                    removeClient(clientSocket, fds);
                    return;
                }

                const std::string& outputBuffer = clientIt->second.getOutputBuffer();
                if (outputBuffer.empty()) {
                    fds[i].events &= ~POLLOUT; // –°–Ω–∏–º–∞–µ–º POLLOUT, –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç
                    return;
                }

                ssize_t bytesSent = send(clientSocket, outputBuffer.c_str(), outputBuffer.length(), 0);
                if (bytesSent <= 0) {
                    // –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è
                    std::cout << "Failed to send data or client disconnected: bytesSent = " << bytesSent << "\n";
                    removeClient(clientSocket, fds);
                    return;
                }

                // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–ø–æ–ª–Ω–∞—è –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–∞—è)
                std::cout << "Bytes sent: " << bytesSent << " of " << outputBuffer.length() << std::endl;
                clientIt->second.eraseOutputBuffer(bytesSent);
                if (clientIt->second.getOutputBuffer().empty()) {
                    fds[i].events &= ~POLLOUT; // –°–Ω–∏–º–∞–µ–º POLLOUT, –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –æ–ø—É—Å—Ç–µ–ª
                } else {
                    std::cout << "Partial send, remaining: " << clientIt->second.getOutputBuffer() << "\n";
                }
            }
            break;
        }
    }
}

void Server::removeClientFromChannels(int clientSocket) {
    for (std::vector<Channel>::iterator it = channels.begin(); it != channels.end(); ++it) {
        it->removeMember(clientSocket);
    }
}

/* –§—É–Ω–∫—Ü–∏—è `removeClient()` —É–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞.   
1. **–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ** —Å –∫–ª–∏–µ–Ω—Ç–æ–º (`close(clientSocket)`).  
2. **–£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–∞ (`pollfd`)**, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –±–æ–ª—å—à–µ –Ω–µ —Å–ª–µ–¥–∏–ª –∑–∞ –µ–≥–æ —Å–æ–±—ã—Ç–∏—è–º–∏.  
3. **–£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö (`m_clients`)**.  
4. **–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ** –æ —Ç–æ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω. */

void Server::removeClient(int clientSocket, std::vector<pollfd>& fds) {
    close(clientSocket);
    for (std::vector<pollfd>::iterator it = fds.begin(); it != fds.end(); ++it) {
        if (it->fd == clientSocket) {
            fds.erase(it);
            break;
        }
    }
    removeClientFromChannels(clientSocket);
    m_clients.erase(clientSocket);
    std::cout << "Client " << clientSocket << " removed.\n";
}

void Server::shutdown() {
    for (std::map<int, Client>::iterator it = m_clients.begin(); it != m_clients.end(); ++it) {
        close(it->first);
    }
    m_clients.clear();

    if (m_serverSocket != -1) {
        close(m_serverSocket);
        m_serverSocket = -1;
    }

    channels.clear();

    std::cout << " \033[38;5;222mServer shutdown complete.\033[0m\n";
    std::cout << "                               üß®\n";
}
